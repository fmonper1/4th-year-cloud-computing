buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE")
    }
}

configure(subprojects - project(':utils')){
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'war'

    group = 'ac.uk.shef.cc19grp10'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    processResources {
        filesMatching("application.properties") {
            expand(artifact: "${archivesBaseName}")
        }
    }

    dependencies {
        implementation 'javax.servlet:jstl:1.2'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'com.h2database:h2'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'mysql:mysql-connector-java'
        implementation 'org.flywaydb:flyway-core'
        providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
        providedRuntime 'org.apache.tomcat.embed:tomcat-embed-jasper'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        implementation project(':utils')
    }

    //patterns for libs to be bundled in the thin jar
    def thinLibs = ["utils-\\d+\\.\\d+\\.\\d+\\.jar","mysql-connector-java-\\d+\\.\\d+\\.\\d+\\.jar","flyway-core-\\d+\\.\\d+\\.\\d+\\.jar"]

    bootWar {
        classpath = classpath.filter { File file ->
            //remove all jars except those in thinLibs
            !(file.name.endsWith( ('jar') ) && !thinLibs.any { pattern -> file.name.matches(pattern)})
        }
        providedClasspath = providedClasspath.filter { File file ->
            //remove all jars except those in thinLibs
            !(file.name.endsWith( ('jar') ) && !thinLibs.any { pattern -> file.name.matches(pattern)})
        }
        archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
    }

    task copyToLib(type: Copy) {
        //copy all jars except those in thinLibs
        into "$buildDir/libs"
        from configurations.compileClasspath
        exclude {   toExclude ->
            thinLibs.any { pattern -> toExclude.file.name.matches(pattern)}
        }
    }

    assemble.dependsOn(copyToLib)

}