package ac.uk.shef.cc19grp10.bookswap;


import ac.uk.shef.cc19grp10.bookswap.models.User;
import ac.uk.shef.cc19grp10.bookswap.repositories.UserRepository;
import com.sun.org.apache.xpath.internal.operations.Bool;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import ac.uk.shef.cc19grp10.bookswap.models.Listing;
import ac.uk.shef.cc19grp10.bookswap.repositories.ListingRepository;
import org.springframework.web.servlet.ModelAndView;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import java.util.ArrayList;
import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/listing") // This means URL's start with /demo (after Application path)
public class ListingController	 {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private ListingRepository listingRepository;
	// TODO: 01/05/19 REMOVE THIS
	@Autowired
	private UserRepository userRepository;
	private List<Listing> searchResults = new ArrayList<Listing>();
	private List<Listing> searchResults2 = new ArrayList<Listing>();

	private final Logger logger = LoggerFactory.getLogger(ListingController.class);

	private boolean isOwner;

	/**
	This route is used to view the details for a listing
	 */
	@RequestMapping(path = "/{id}/view", method = RequestMethod.GET)
	public ModelAndView displayListing(
		@PathVariable(value="id")Integer id,
	 	ModelMap model,
		@SessionAttribute("user") User user

	) {
		searchResults.clear();
		searchResults2.clear();

		Listing listing = listingRepository.findById(id).orElse(null);

		listingRepository.findByModule(listing.getModuleCode()).forEach(searchResults::add);
		listingRepository.findByModule(listing.getModuleCode().replaceAll("\\d","")).forEach(searchResults2::add);

		isOwner = user.getId() == listing.getUser().getId();

		model.addAttribute("listing", listing);
		model.addAttribute("searchResults", searchResults);
		model.addAttribute("searchResults2", searchResults2);
		model.addAttribute("isOwner", isOwner);

		return new ModelAndView("listings/view", model);
	}

    /**
     GET - This route is used to view the form to update a listing
     */

	@RequestMapping(path = "/{id}/update", method = RequestMethod.GET)
	public ModelAndView updateListing(
		@PathVariable(value="id")Integer id,
		@SessionAttribute("user") User user,
		ModelMap model
	) {
		Listing listing = listingRepository.findById(id).orElse(null);

		model.addAttribute("listing", listing);
		return new ModelAndView("listings/update");
	}


	@RequestMapping(path = "/{id}/update", method = RequestMethod.POST)
	public ModelAndView submitUpdateListing(@PathVariable(value="id")Integer id, @Valid @ModelAttribute("listing")Listing listing, BindingResult result, ModelMap model) {
		if (result.hasErrors()) {
			return new ModelAndView("redirect:/listing/"+id+"/view", model);
		}
		Listing l = listingRepository.save(listing);

		model.addAttribute("listing", listing);
		return new ModelAndView("redirect:/listing/"+id+"/view", model);
	}

	/**
	 This route is used to view the details for a listing
	 */
	@RequestMapping(path = "/{id}/close", method = RequestMethod.GET)
	public ModelAndView markAsClosed(@PathVariable(value="id")Integer id, ModelMap model) {
		Listing listing = listingRepository.findById(id).orElse(null);

		listing.setClosed(Boolean.TRUE);
		listingRepository.save(listing);

		return new ModelAndView("redirect:/listing/"+id+"/view", model);
	}

	@RequestMapping(path="/add", method = RequestMethod.GET) // Map ONLY GET Requests
    public ModelAndView showForm(@ModelAttribute CreateListingForm createListingForm) {
        return new ModelAndView("listings/add");
    }

	@RequestMapping(path="/add", method = RequestMethod.POST) // Map ONLY GET Requests
	public ModelAndView submit(
			@ModelAttribute @Valid CreateListingForm createListingForm,
			BindingResult result,
		 	@SessionAttribute("user") User user
	) {
		if (result.hasErrors()) {
			logger.debug(result.toString());
			createListingForm.setError("Some error");
			return new ModelAndView("listings/add");
		}
		Listing l = new Listing(
				createListingForm.title,
				createListingForm.description,
				createListingForm.moduleCode,
				user
		);
		listingRepository.save(l);
		return new ModelAndView("redirect:/listing/"+l.getId()+"/view");
	}

    @GetMapping("/{id}/delete")
    public String deleteCustomer(@PathVariable(value="id")Integer id) {
        listingRepository.deleteById(id);
        return "redirect:/user/listings";
    }

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Listing> getAllListings() {
		// This returns a JSON or XML with the users
		return listingRepository.findAll();
	}

	public class CreateListingForm {
		@Size(min=5,max=28)
		String title;

		@NotBlank
		String description;

		@NotBlank
		String moduleCode;

		String error;

		public String getTitle() {
			return title;
		}

		public void setTitle(String title) {
			this.title = title;
		}

		public String getDescription() {
			return description;
		}

		public void setDescription(String description) {
			this.description = description;
		}

		public String getModuleCode() {
			return moduleCode;
		}

		public void setModuleCode(String moduleCode) {
			this.moduleCode = moduleCode;
		}

		public String getError() {return error;}

		public void setError(String error) {this.error = error;}

	}

}