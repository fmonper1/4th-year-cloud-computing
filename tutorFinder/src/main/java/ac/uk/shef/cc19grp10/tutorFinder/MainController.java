package ac.uk.shef.cc19grp10.tutorFinder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;

import ac.uk.shef.cc19grp10.tutorFinder.Tutor;
import ac.uk.shef.cc19grp10.tutorFinder.TutorRepository;
import org.springframework.web.servlet.ModelAndView;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Controller    // This means that this class is a Controller
@RequestMapping(path="") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    //private SubjectRepository subjectRep;
    private TutorRepository tutorRepository;

    @Autowired
    private SubjectRepository subjectRepository;




    private final Logger logger = LoggerFactory.getLogger(MainController.class);
//    @GetMapping(path="/add") // Map ONLY GET Requests
//    public @ResponseBody String addNewUser (@RequestParam String name
//            , @RequestParam String email) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setName(name);
//        n.setEmail(email);
//        userRepository.save(n);
//        return "Saved";
//    }

    private static List<Tutor> tutors = new ArrayList<Tutor>();
    private static List<Tutor> tutorsFound = new ArrayList<Tutor>();
    private static List<Subject> subjects = new ArrayList<Subject>();
    private static List<Subject> relatedSubjects = new ArrayList<Subject>();

    @RequestMapping(value = "/map", method = RequestMethod.GET)
    public String map(){
        //logger.info("index() executed");
        return "map";
    }

    @GetMapping(value = { "/", "/index" })
    public String index(Model model) {
        tutors.clear();
        tutorRepository.findAll().forEach(tutors::add);

        model.addAttribute("tutors", tutors);

        return "index";
    }


    @RequestMapping(path = "/tutor/{id}/view", method = RequestMethod.GET)
    public ModelAndView displayTutor(@PathVariable(value="id")Long id, ModelMap model) {
        Tutor tutor = tutorRepository.findById(id).orElse(null);

        model.addAttribute("firstName", tutor.getFirstName());
        model.addAttribute("lastName", tutor.getLastName());
        model.addAttribute("email", tutor.getEmailAddress());
        model.addAttribute("address", tutor.getAddress());
        model.addAttribute("phoneNumber", tutor.getPhoneNumber());
        model.addAttribute("bio", tutor.getBio());
        model.addAttribute("id", tutor.getId());
        model.addAttribute("subjects", tutor.getSubjects());
        relatedSubjects.clear();
        for(Subject object : tutor.getSubjects()) {
            String element = (String) object.getName();
            logger.info(element);
            subjectRepository.findByName(object.getName()).forEach(relatedSubjects::add);
        }
        if(relatedSubjects.isEmpty()){
            logger.info("its empty broooooo");
        }
        System.out.println(relatedSubjects.size());
        relatedSubjects.stream().distinct().collect(Collectors.toList());
        model.addAttribute("relatedSubjects",relatedSubjects);


        return new ModelAndView("tutors/view","tutor", model);
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Subject> getAllUsers() {
        // This returns a JSON or XML with the users

        return subjectRepository.findAll();

    }

    @RequestMapping( value= "/tutorResults", method = RequestMethod.GET)
    public String showTutorResults(){
        return "tutorResults";
    }

    @RequestMapping( value= "/tutorResults", method = RequestMethod.POST)
    public String showStudentBySurname(@RequestParam (value = "search", required = false) String surname, Model model) {

        tutorsFound.clear();
        tutorRepository.findByName(surname).forEach(tutorsFound::add);
        if(tutorsFound.isEmpty()){
            logger.info("its empty broooooo");
        }

        model.addAttribute("results", tutorsFound);

        return "tutorResults";
    }
    @RequestMapping( value= "/subjectResults", method = RequestMethod.POST)
    public String showSubject(@RequestParam (value = "searchSubject", required = false) String subject, Model model) {
        subjects.clear();
        subjectRepository.findByName(subject).forEach(subjects::add);
        if(subjects.isEmpty()){
            logger.info("its empty broooooo");
        }

        model.addAttribute("subjectResults", subjects);

        return "subjectResults";
    }
//    public String index(Model model) {
//        tutors.clear();
//        tutorRepository.findAll().forEach(tutors::add);
//
//        model.addAttribute("tutors", tutors);
//
//        return "index";
//    }
//

//    @GetMapping(path="/all")
//    public @ResponseBody Iterable<Subject> getAllSubjects() {
//        // This returns a JSON or XML with the users
//
//        return subjectRep.findAll();
//
//    }
}