package hello;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import hello.models.Listing;
import hello.repositories.ListingRepository;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import javax.validation.Valid;
import java.util.Collection;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/listing") // This means URL's start with /demo (after Application path)
public class ListingController	 {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private ListingRepository listingRepository;

	private final Logger logger = LoggerFactory.getLogger(ListingController.class);

	/**
	This route is used to view the details for a listing
	 */
	@RequestMapping(path = "/{id}/view", method = RequestMethod.GET)
	public ModelAndView displayListing(@PathVariable(value="id")Integer id, ModelMap model) {
		Listing listing = listingRepository.findById(id).orElse(null);

		model.addAttribute("title", listing.getTitle());
		model.addAttribute("description", listing.getDescription());
		model.addAttribute("id", listing.getId());
		return new ModelAndView("listings/view","listing", model);
	}

    /**
     GET - This route is used to view the form to update a listing
     */
	@RequestMapping(path = "/{id}/update", method = RequestMethod.GET)
	public ModelAndView updateListing(@PathVariable(value="id")Integer id, ModelMap model) {
		Listing listing = listingRepository.findById(id).orElse(null);

		model.addAttribute("listing", listing);
		return new ModelAndView("listings/update","listing", listing);
	}

	@RequestMapping(path = "/{id}/update", method = RequestMethod.POST)
	public RedirectView submitUpdateListing(@PathVariable(value="id")Integer id, @Valid @ModelAttribute("listing")Listing listing, BindingResult result, ModelMap model) {
		if (result.hasErrors()) {
			return new RedirectView("/");
		}
		Listing l = listingRepository.save(listing);

		model.addAttribute("listing", listing);
		return new RedirectView("/listing/"+listing.getId()+"/update");
	}

	@RequestMapping(path="/add", method = RequestMethod.GET) // Map ONLY GET Requests
    public ModelAndView showForm() {
        return new ModelAndView("listings/add", "listing", new Listing());
    }

	@RequestMapping(path="/add", method = RequestMethod.POST) // Map ONLY GET Requests
	public String submit(@Valid @ModelAttribute("listing")Listing listing,
						 BindingResult result, ModelMap model) {
		if (result.hasErrors()) {
			return "error";
		}
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		listingRepository.save(listing);
		model.addAttribute("title", listing.getTitle());
		model.addAttribute("description", listing.getDescription());
		model.addAttribute("id", listing.getId());
		return "listings/view";
	}

    @GetMapping("/{id}/delete")
    public String deleteCustomer(@PathVariable(value="id")Integer id) {
        listingRepository.deleteById(id);
        return "redirect:/user/listings";
    }

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Listing> getAllListings() {
		// This returns a JSON or XML with the users
		return listingRepository.findAll();
	}
}